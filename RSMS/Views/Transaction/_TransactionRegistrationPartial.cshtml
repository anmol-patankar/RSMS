@model RSMS.ViewModels.TotalTransactionModel

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">New Transaction</h5>
        <button type="button" class="close btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <table id="transactionInfoTable">
            <thead>
                <tr>
                    <th>Store ID</th>
                    <th>Cashier ID</th>
                    <th>Customer ID</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><input type="text" id="storeName" disabled value="@ViewBag.StoreName"></td>
                    <td><input type="text" id="cashierUsername" disabled value="@ViewBag.UsernameOfCurrentUser"></td>
                    <td>
                        <div class="position-relative">
                            <select id="customerSelect" class="form-control form-control-sm" asp-items="@(new SelectList(ViewBag.CustomerNames, "Key", "Value"))">
                            </select>
                            <div id="customerError" class="invalid-feedback">Please select a customer from the list.</div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>

        <h6>Product List</h6>
        <table id="transactionProductsTable" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th style="width: 14%">Product ID</th>
                    <th style="width: 14%">Product Name</th>
                    <th style="width: 14%">Pretax Price</th>
                    <th style="width: 14%">Tax Rate</th>
                    <th style="width: 14%">Tax Type</th>
                    <th style="width: 14%">Discount</th>
                    <th style="width: 14%">Max Quantity</th>
                    <th style="width: 14%">Quantity</th>
                    <th style="width: 14%">Subtotal</th>
                </tr>
            </thead>
            <tbody>
                <!-- Rows will be added here -->
            </tbody>
        </table>
        <br>

        <div class="position-relative" style="display: flex; gap: 5px;">
            <input type="text" readonly id="productId" class="form-control form-control-sm" placeholder="Product ID" style="width:13%;">

            <select id="productSelect" class="form-control form-control-sm" asp-items="@(new SelectList(ViewBag.AllProductsInStoreDict, "Key", "Value"))" style="width: 13%;">
            </select>
            <input type="number" readonly id="pretaxPrice" class="form-control form-control-sm" placeholder="Pretax Price" style="width:13%;">
            <input type="number" readonly id="taxRate" class="form-control form-control-sm" placeholder="Tax Rate" style="width:13%;">
            <input type="text" readonly id="taxType" class="form-control form-control-sm" placeholder="Tax Type" style="width:13%;">
            <input type="number" readonly id="discount" class="form-control form-control-sm" placeholder="Discount" style="width:13%;">
            <input type="number" readonly id="maxQuantity" class="form-control form-control-sm" placeholder="Max Quantity" style="width:13%;">
            <input type="number" id="quantity" class="form-control form-control-sm" placeholder="Quantity" style="width:13%;">

        </div>
        <div>
            <span id="productAddError" class="text-danger" style="display:none;"></span>
        </div>
        <button class="btn btn-primary" onclick="addRow()">Add Row</button>
        <button id="addTransactionButton" type="submit" class="btn btn-primary">Add Transaction</button>


    </div>
</div>
<script>
    document.getElementById('productSelect').addEventListener('change', function () {
        var selectedProductId = this.value;
        var storeId = @ViewBag.StoreId;
        var products = @Html.Raw(Json.Serialize(ViewBag.AllProductsInStore));
        var selectedProduct;
        for (var key in products) {
            console.log(key);
            if (products[key].productId == selectedProductId) {

                selectedProduct = products[key];
                document.getElementById('productId').value = selectedProduct.productId;
                document.getElementById('pretaxPrice').value = selectedProduct.priceBeforeTax;
                document.getElementById('taxRate').value = selectedProduct.taxRate;
                document.getElementById('taxType').value = selectedProduct.taxType;
                document.getElementById('maxQuantity').value = selectedProduct.quantity;
                document.getElementById('discount').value = selectedProduct.discountPercent;

                console.log(selectedProduct);
                break;
            }
        }
    });
    document.addEventListener('DOMContentLoaded', function () {
        var productSelect = document.getElementById('productSelect');
        var event = new Event('change');
        productSelect.dispatchEvent(event);
    });
    function addRow() {
        // Get the table body element
        var table = document.getElementById("transactionProductsTable").getElementsByTagName('tbody')[0];

        // Get the input values
        var productIdInput = document.getElementById("productId");
        var productSelect = document.getElementById("productSelect");
        var productId = productSelect.value;
        var productName = productSelect.options[productSelect.selectedIndex].text;
        var pretaxPrice = document.getElementById("pretaxPrice").value;
        var taxRate = document.getElementById("taxRate").value;
        var taxType = document.getElementById("taxType").value;
        var discount = document.getElementById("discount").value;
        var maxQuantity = document.getElementById("maxQuantity").value;
        var quantity = document.getElementById("quantity").value;
        if (pretaxPrice == "") {
            document.getElementById('productAddError').style.display = 'inline';
            document.getElementById('productAddError').innerText = "Select a product and a quantity.";
            return false;
        }
        else if (!(Number.isInteger(Number(quantity)) && Number(quantity) > 0)) {
            document.getElementById('productAddError').style.display = 'inline';
            document.getElementById('productAddError').innerText = "Quantity invalid.";
            return false;
        }
        if (parseInt(quantity) > parseInt(maxQuantity)) {
            document.getElementById('productAddError').style.display = 'inline';
            document.getElementById('productAddError').innerText = "Quantity exceeds maximum allowed.";
            return false;
        }

        // Calculate the subtotal
        var subtotal = (pretaxPrice * (1 + taxRate / 100) * (1 - discount / 100)) * quantity;

        // Create a new row and cells
        var newRow = table.insertRow();
        var productIdCell = newRow.insertCell(0);
        var productNameCell = newRow.insertCell(1);
        var pretaxPriceCell = newRow.insertCell(2);
        var taxRateCell = newRow.insertCell(3);
        var taxTypeCell = newRow.insertCell(4);
        var discountCell = newRow.insertCell(5);
        var maxQuantityCell = newRow.insertCell(6);
        var quantityCell = newRow.insertCell(7);
        var subtotalCell = newRow.insertCell(8);

        // Insert the input values into the cells
        productIdCell.innerHTML = productId;
        productNameCell.innerHTML = productName;
        pretaxPriceCell.innerHTML = pretaxPrice;
        taxRateCell.innerHTML = taxRate;
        taxTypeCell.innerHTML = taxType;
        discountCell.innerHTML = discount;
        maxQuantityCell.innerHTML = maxQuantity;
        quantityCell.innerHTML = quantity;
        subtotalCell.innerHTML = subtotal.toFixed(2);

        productSelect.remove(productSelect.selectedIndex);

        // Clear the input fields
        document.getElementById("pretaxPrice").value = "";
        document.getElementById("taxRate").value = "";
        document.getElementById("taxType").value = "";
        document.getElementById("discount").value = "";
        document.getElementById("maxQuantity").value = "";
        document.getElementById("quantity").value = "";
        document.getElementById("productId").value = "";


        // Optionally, update the productId field based on the selection
        if (productSelect.selectedIndex >= 0) {
            productIdInput.value = productId;
        }
        return true;
    }

    $(document).ready(function () {
        $('#addTransactionButton').click(function (event) {
            event.preventDefault();
            var transaction = {
                StoreId: @ViewBag.StoreId,
                CashierId: `@ViewBag.UserIdOfCurrentUser`,
                CustomerId: document.getElementById("customerSelect").value,

            };
            var rows = document.getElementById("transactionProductsTable").getElementsByTagName('tbody')[0].rows;
            if (rows.length < 1) {
                if (addRow() === false) {
                    return;
                }
            }
            var transactionDetails = [];
            for (var i = 0; i < rows.length; i++) {
                var cells = rows[i].cells;
                var detail = {
                    ProductId: cells[0].innerText,
                    PriceBeforeTax: parseFloat(cells[2].innerText),
                    TaxPercent: parseFloat(cells[3].innerText),
                    DiscountPercent: parseFloat(cells[5].innerText),
                    Quantity: parseInt(cells[7].innerText),
                };
                transactionDetails.push(detail);
            }

            var totalTransactionModel = {
                Transaction: transaction,
                TransactionDetailList: transactionDetails
            };
            debugger;
            $.ajax({
                url: '/Transaction/RegisterTransaction',
                type: 'POST',
                data: {
                    totalTransaction: totalTransactionModel
                },
                success: function (response) {
                    if (response.success) {
                        // Close the modal on success
                        $('#transactionRegistrationModal').modal('hide');
                        // Optionally refresh the part of the page that shows the list of transactions
                        //$('#"v-pills-transactions').load('/Store/GetStores'); // Example of reloading a part of the page
                    } else {
                        $('#payrollregistration-modal-content').html(response);
                    }
                },
            });
        });

    });
</script>